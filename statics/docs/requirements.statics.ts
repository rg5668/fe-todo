export const requirementsDoc = `
## 1. 사용자 인증 및 계정 관리

### 1.1 로그인
- **요구사항:**
  - 사용자는 이메일과 비밀번호를 입력하여 로그인할 수 있어야 합니다.
  - 서버는 입력된 이메일로 사용자 정보를 조회하여 비밀번호를 검증합니다.
  - 로그인 성공 시, 서버는 쿠키에 \`userId\`를 저장하고 루트 페이지 ("/")로 리다이렉트합니다.
  - 실패 시에는 에러 페이지 (예: \`/error\`)로 리다이렉트합니다.
- **API 엔드포인트:** \`POST /api/auth/login\`

### 1.2 회원가입
- **요구사항:**
  - 사용자는 이메일, 비밀번호, (선택적) 이름을 입력하여 회원가입할 수 있어야 합니다.
  - 서버는 회원가입 전에 해당 이메일로 이미 가입된 사용자가 있는지 중복 검사를 합니다.
  - 중복이 없으면, 새로운 사용자 정보를 데이터베이스에 저장하고 쿠키에 \`userId\`를 기록합니다.
  - 회원가입 성공 시 루트 페이지 ("/")로 리다이렉트합니다.
  - 중복되거나 요청이 올바르지 않은 경우에는 에러 페이지로 리다이렉트합니다.
- **API 엔드포인트:** \`POST /api/auth/signup\`

## 2. Todo 리스트 관리

### 2.1 Todo 목록 조회 (페이지네이션 / 무한 스크롤 및 필터 기능)
- **요구사항:**
  - 사용자는 자신의 Todo 목록을 조회할 수 있어야 합니다.
  - 클라이언트는 쿼리 파라미터 (\`all\`, \`limit\`, \`offset\`)를 통해 데이터 범위를 지정할 수 있어야 합니다.
  - **무한 스크롤 모드:**  
    - 만약 \`all\` 파라미터가 "true"로 전달되면, 전체 데이터를 반환합니다.
    - 클라이언트는 반환된 전체 데이터를 바탕으로 무한 스크롤 방식으로 동적으로 새로운 페이지의 데이터를 로드할 수 있습니다.
  - **페이지네이션 모드:**  
    - \`all\` 파라미터가 "true"가 아니면, \`limit\`과 \`offset\` 값을 기반으로 페이지네이션 방식으로 데이터가 반환됩니다.
    - \`limit\`은 한 번에 불러올 항목 수를, \`offset\`은 데이터를 건너뛸 시작 인덱스를 의미합니다.
  - **필터 기능:**  
    - \`completed\` 파라미터를 통해 완료 여부 (\`true\` 또는 \`false\`)에 따른 Todo 목록 필터링을 지원합니다.
    - \`keyword\` 파라미터를 통해 \`title\` 또는 \`description\`에 특정 문자열이 포함된 Todo 항목만 검색할 수 있도록 합니다.
- **API 엔드포인트:** \`GET /api/todos\`
- **사용 예시:**
  - **무한 스크롤 모드 (전체 데이터):**  
    \`GET /api/todos?all=true\`
  - **페이지네이션 모드 (예: 10개씩, 첫 페이지):**  
    \`GET /api/todos?limit=10&offset=0\`
  - **완료 여부 필터 (완료된 항목):**  
    \`GET /api/todos?limit=10&offset=0&completed=true\`
  - **키워드 검색 (예: "meeting" 포함):**  
    \`GET /api/todos?limit=10&offset=0&keyword=meeting\`
  - **필터와 페이지네이션 통합 (예: 미완료 항목 중 "project" 검색):**  
    \`GET /api/todos?limit=10&offset=0&completed=false&keyword=project\`

### 2.2 단일 Todo 상세 조회
- **요구사항:**
  - 사용자는 특정 Todo의 상세 정보를 확인할 수 있어야 합니다.
  - Todo의 ID를 기반으로 상세 정보를 조회합니다.
- **API 엔드포인트:** \`GET /api/todos/{id}\`

## 3. Todo CRUD 기능

### 3.1 Todo 등록 (생성)
- **요구사항:**
  - 로그인한 사용자는 새로운 Todo 항목을 생성할 수 있어야 합니다.
  - 최소한 제목 (\`title\`)은 필수 입력 항목입니다.
  - 선택적으로 설명 (\`description\`)을 추가할 수 있습니다.
- **API 엔드포인트:** \`POST /api/todos\`

### 3.2 Todo 수정 (업데이트)
- **요구사항:**
  - 사용자는 기존의 Todo 항목을 수정할 수 있어야 합니다.
  - 수정 가능한 필드는 제목, 설명, 완료 여부 (\`completed\`) 등이 포함됩니다.
  - 업데이트 시에는 요청 본문에서 변경할 필드만 전달할 수 있어야 합니다.
- **API 엔드포인트:** \`PATCH /api/todos/{id}\`

### 3.3 Todo 삭제
- **요구사항:**
  - 사용자는 기존의 Todo 항목을 삭제할 수 있어야 합니다.
  - 삭제 요청은 Todo의 ID를 기반으로 수행됩니다.
  - 삭제 후, 삭제된 Todo 항목의 정보가 반환됩니다.
- **API 엔드포인트:** \`DELETE /api/todos/{id}\`

## 4. 전반적인 요구사항

- **보안 및 인증:**
  - API는 쿠키에 저장된 \`userId\` 값을 기반으로 사용자를 인증합니다.
  - 인증되지 않은 사용자는 Todo CRUD 작업을 수행할 수 없습니다.
- **에러 처리:**
  - 각 API 엔드포인트는 적절한 HTTP 상태 코드와 함께 에러 메시지를 반환합니다.
  - 클라이언트는 반환된 에러 메시지를 기반으로 사용자에게 알림을 제공할 수 있어야 합니다.
- **페이지네이션 및 무한 스크롤:**
  - 클라이언트는 \`limit\`과 \`offset\` 파라미터를 사용하여 원하는 데이터 범위를 동적으로 요청할 수 있어야 합니다.
  - 무한 스크롤을 구현할 경우, 사용자가 스크롤 시 추가 데이터 로드를 요청하여 화면에 계속 표시할 수 있어야 합니다.
- **필터 및 키워드 검색:**
  - 클라이언트는 \`completed\` 파라미터를 사용하여 완료 여부에 따른 필터링을 요청할 수 있어야 합니다.
  - 클라이언트는 \`keyword\` 파라미터를 사용하여 Todo의 제목이나 설명에 특정 문자열이 포함된 항목만 조회할 수 있어야 합니다.
  - 이러한 필터와 키워드 검색 기능은 Todo 목록 조회 API의 동작 모드를 확장하는 역할을 합니다.
`;
